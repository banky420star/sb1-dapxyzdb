version: '3.8'

services:
  # AI Trading Backend - Optimized for 2 vCPU / 4GB RAM
  trading-backend:
    build: .
    container_name: ai-trading-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "5555:5555"  # MT5 Command Port
      - "5556:5556"  # MT5 Data Port
    environment:
      - NODE_ENV=production
      - PORT=8000
      - TRADING_MODE=paper  # Start in paper mode for safety
      - ENABLE_LIVE_TRADING=false
      - MT5_INTEGRATION=true
      - ZMQ_COMMAND_PORT=5555
      - ZMQ_DATA_PORT=5556
      - POSITION_SIZE_LIMIT=0.01
      - MAX_DAILY_LOSS=0.005
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./config:/app/config
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Frontend Dashboard
  trading-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ai-trading-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://45.76.136.30:8000
      - VITE_WS_URL=ws://45.76.136.30:8000
    depends_on:
      - trading-backend
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trading-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - trading-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'  # Keep data for 7 days only
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - trading-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - trading-network
    depends_on:
      - trading-backend
      - trading-frontend
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  trading-network:
    driver: bridge